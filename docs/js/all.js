'use strict';

var scene = void 0,
    renderer = void 0,
    camera = void 0,
    light = void 0;

var pic = void 0;

var width = void 0,
    height = void 0;

var raycaster = void 0,
    mouse = void 0,
    control = void 0;

var init = function init() {
    window.addEventListener('resize', onResize, false);

    width = window.innerWidth;
    height = window.innerHeight - 20;

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(width, height);
    document.getElementById('main').appendChild(renderer.domElement);

    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);
    camera.position.set(0, 0, 2);
    scene.add(camera);

    light = new THREE.DirectionalLight(0xffffff);
    light.position.set(0, 10, 0);
    // light.castShadow = true;
    scene.add(light);

    raycaster = new THREE.Raycaster();
    mouse = new THREE.Vector2();

    control = new THREE.OrbitControls(camera, renderer.domElement);

    renderContent();
    renderSkybox();
    animate();

    window.addEventListener('click', onClick, false);
};

var renderContent = function renderContent() {
    var picGeom = new THREE.PlaneGeometry(1, 1);
    var picMat = new THREE.MeshBasicMaterial({
        map: new THREE.TextureLoader().load('./assets/img/david.jpg')
    });

    pic = new THREE.Mesh(picGeom, picMat);
    pic.position.set(0, 0, -4);
    pic.name = 'david';
    scene.add(pic);

    var planeGeom = new THREE.PlaneGeometry(7, 7);
    var planeMat = new THREE.MeshPhongMaterial({ color: 0xdddddd, side: THREE.DoubleSide });
    var plane = new THREE.Mesh(planeGeom, planeMat);
    plane.rotation.x = Math.PI / 2;
    plane.position.z = -1;
    plane.position.y = -1;
    scene.add(plane);

    var fontLoader = new THREE.FontLoader();
    fontLoader.load('./assets/fonts/helvetiker_bold.typeface.json', function (font) {
        var fontGeom = new THREE.TextGeometry('David', {
            font: font,
            size: .8,
            height: .2

        });
        var fontFront = new THREE.MeshBasicMaterial({
            color: 0xff0000
        });
        var fontSide = new THREE.MeshBasicMaterial({
            color: 0xffffff
        });

        var fontMesh = new THREE.Mesh(fontGeom, [fontFront, fontSide]);
        fontMesh.position.set(-1.5, 1, -4);
        scene.add(fontMesh);

        fontGeom.computeBoundingBox();
        fontGeom.textWidth = 1;
    });

    var objLoader = new THREE.OBJLoader();
    objLoader.load('./assets/obj/davidprint.obj', function (mesh) {
        mesh.scale.set(.02, .02, .02);
        mesh.position.set(-2.5, -1, -4);
        scene.add(mesh);
    });
};

var renderSkybox = function renderSkybox() {
    var skyboxGeom = new THREE.CubeGeometry(100, 100, 100);
    var skyboxMat = [new THREE.MeshBasicMaterial({
        map: new THREE.TextureLoader().load('./assets/skybox/ft.png'),
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        map: new THREE.TextureLoader().load('./assets/skybox/bk.png'),
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        map: new THREE.TextureLoader().load('./assets/skybox/up.png'),
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        map: new THREE.TextureLoader().load('./assets/skybox/dn.png'),
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        map: new THREE.TextureLoader().load('./assets/skybox/rt.png'),
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        map: new THREE.TextureLoader().load('./assets/skybox/lf.png'),
        side: THREE.DoubleSide
    })];

    var skybox = new THREE.Mesh(skyboxGeom, skyboxMat);
    scene.add(skybox);
};

var onResize = function onResize() {
    width = window.innerWidth;
    height = window.innerHeight - 20;

    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
};

var animate = function animate() {
    requestAnimationFrame(animate);
    render();
};

var onClick = function onClick(e) {
    e.preventDefault();
    mouse.x = e.clientX / window.innerWidth * 2 - 1;
    mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;
    console.log(mouse);
    raycaster.setFromCamera(mouse, camera);
    var intersects = raycaster.intersectObjects([pic]);
    if (intersects.length > 0) {
        console.log(intersects[0]);
        intersects[0].object.position.z -= 1;
    }
};

var render = function render() {
    renderer.render(scene, camera);
};

window.onload = init;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
